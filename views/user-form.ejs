<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= isNew ? 'Add New User' : 'Edit User' %> - Al-Shorouk Radiology Management System</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/custom.css" rel="stylesheet">
    <style>
        .navbar-brand {
            font-weight: bold;
        }
        .navbar-brand i {
            color: #ffffff;
        }
        .navbar-nav .nav-link {
            font-weight: 500;
            transition: color 0.3s ease;
        }
        .navbar-nav .nav-link:hover {
            color: rgba(255, 255, 255, 0.8) !important;
        }
        .navbar-nav .nav-link.active {
            color: #ffffff !important;
            background-color: rgba(255, 255, 255, 0.1);
            border-radius: 5px;
        }
        .user-info {
            font-size: 0.9em;
            color: rgba(255, 255, 255, 0.9);
        }
        .user-role {
            font-weight: 600;
            text-transform: capitalize;
        }
        .logout-btn {
            border: 1px solid rgba(255, 255, 255, 0.3);
            transition: all 0.3s ease;
        }
        .logout-btn:hover {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.5);
        }
        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .form-control:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.25);
        }
        .btn-custom {
            border-radius: 25px;
            padding: 10px 30px;
        }
        .required-field::after {
            content: " *";
            color: #dc3545;
        }
    </style>
</head>
<body>
    <!-- Navigation -->
    <%- include('navigation', { currentPage: 'admin' }) %>

    <div class="container mt-4">
        <!-- Header -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="text-center">
                    <h2>
                        <i class="fas fa-<%= isNew ? 'plus' : 'edit' %> me-2"></i>
                        <%= isNew ? 'Add New User' : 'Edit User' %>
                    </h2>
                    <p class="text-muted"><%= isNew ? 'Create a new user account for the system' : 'Update user information and settings' %></p>
                </div>
            </div>
        </div>

        <!-- User Form -->
        <div class="row justify-content-center">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body p-4">
                        <form method="POST" action="<%= isNew ? '/admin/users' : `/admin/users/${editUser.user_id}` %>">
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="username" class="form-label required-field">Username</label>
                                    <input type="text" class="form-control" id="username" name="username"
                                           value="<%= editUser ? editUser.username : '' %>" required>
                                    <div class="form-text">Unique identifier for login</div>
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label for="email" class="form-label required-field">Email Address</label>
                                    <input type="email" class="form-control" id="email" name="email"
                                           value="<%= editUser ? editUser.email : '' %>" required>
                                    <div class="form-text">Used for login and notifications</div>
                                </div>
                            </div>

                            <div class="mb-3">
                                <label for="full_name" class="form-label required-field">Full Name</label>
                                <input type="text" class="form-control" id="full_name" name="full_name"
                                       value="<%= editUser ? editUser.full_name : '' %>" required>
                                <div class="form-text">Display name in the system</div>
                            </div>

                            <div class="mb-3">
                                <label for="role" class="form-label required-field">Role</label>
                                <select class="form-select" id="role" name="role" required>
                                    <option value="">Select a role...</option>
                                    <option value="admin" <%= editUser && editUser.role === 'admin' ? 'selected' : '' %>>Administrator</option>
                                    <option value="nurse" <%= editUser && editUser.role === 'nurse' ? 'selected' : '' %>>Nurse</option>
                                    <option value="physician" <%= editUser && editUser.role === 'physician' ? 'selected' : '' %>>Physician</option>
                                </select>
                                <div class="form-text">Determines user permissions and access level</div>
                            </div>

                            <% if (!isNew) { %>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <input class="form-check-input" type="checkbox" id="is_active" name="is_active"
                                               value="1" <%= editUser && editUser.is_active ? 'checked' : '' %>>
                                        <label class="form-check-label" for="is_active">
                                            Account is active
                                        </label>
                                    </div>
                                    <div class="form-text">Inactive users cannot log in to the system</div>
                                </div>
                            <% } %>

                            <div class="mb-4">
                                <label for="password" class="form-label <%= isNew ? 'required-field' : '' %>">
                                    <%= isNew ? 'Password' : 'New Password (leave blank to keep current)' %>
                                </label>
                                <input type="password" class="form-control" id="password" name="password"
                                       <%= isNew ? 'required' : '' %> minlength="6">
                                <div class="form-text">Minimum 6 characters</div>
                            </div>

                            <!-- User Signature -->
                            <div class="mb-4">
                                <label class="form-label required-field">User Signature</label>
                                <p class="text-muted">Please capture or draw the user's signature for form authentication.</p>
                                <div class="signature-pad border rounded p-3 bg-light" id="signaturePad" style="height: 200px; cursor: crosshair;" role="img" aria-label="Digital signature pad for user">
                                    <canvas id="signatureCanvas" width="800" height="200" class="w-100 h-100" role="img" aria-label="Signature drawing area"></canvas>
                                </div>
                                <div class="mt-2">
                                    <button type="button" class="btn btn-outline-secondary btn-sm" id="clearSignature" aria-label="Clear the signature and start over">
                                        <i class="fas fa-eraser me-1"></i>Clear Signature
                                    </button>
                                    <small class="text-muted ms-2">Click and drag to sign</small>
                                </div>
                                <input type="hidden" name="user_signature" id="userSignatureInput">
                                <% if (editUser && editUser.signature_data) { %>
                                    <div class="mt-3">
                                        <p class="text-muted">Current signature:</p>
                                        <img src="<%= editUser.signature_data %>" alt="Current signature" class="border" style="max-height: 100px;">
                                    </div>
                                <% } %>
                            </div>

                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <a href="/admin" class="btn btn-outline-secondary btn-custom me-md-2">
                                    <i class="fas fa-times me-2"></i>Cancel
                                </a>
                                <button type="submit" class="btn btn-primary btn-custom">
                                    <i class="fas fa-save me-2"></i><%= isNew ? 'Create User' : 'Update User' %>
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Form validation
        document.querySelector('form').addEventListener('submit', function(e) {
            const password = document.getElementById('password').value;
            const isNewUser = '<%- isNew %>' === 'true';

            if (isNewUser && password.length < 6) {
                e.preventDefault();
                alert('Password must be at least 6 characters long.');
                return;
            }

            if (!isNewUser && password && password.length < 6) {
                e.preventDefault();
                alert('New password must be at least 6 characters long.');
                return;
            }

            // Check if signature is provided
            const signatureData = document.getElementById('userSignatureInput').value;
            if (!signatureData || signatureData === '') {
                e.preventDefault();
                alert('Please capture the user signature before saving.');
                document.getElementById('signatureCanvas').scrollIntoView({ behavior: 'smooth', block: 'center' });
                document.getElementById('signatureCanvas').style.borderColor = '#dc3545';
                setTimeout(() => {
                    document.getElementById('signatureCanvas').style.borderColor = '#dee2e6';
                }, 3000);
                return;
            }
        });

        // Signature Pad Script
        document.addEventListener('DOMContentLoaded', function() {
            const canvas = document.getElementById('signatureCanvas');
            const signatureInput = document.getElementById('userSignatureInput');
            const clearButton = document.getElementById('clearSignature');
            const ctx = canvas.getContext('2d');

            let isDrawing = false;
            let currentPath = [];
            let allPaths = [];

            // Set canvas background
            ctx.fillStyle = 'white';
            ctx.fillRect(0, 0, canvas.width, canvas.height);

            // Set drawing properties
            ctx.strokeStyle = '#000';
            ctx.lineWidth = 2;
            ctx.lineCap = 'round';
            ctx.lineJoin = 'round';

            // Mouse events
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseout', stopDrawing);

            // Touch events for mobile
            canvas.addEventListener('touchstart', handleTouchStart);
            canvas.addEventListener('touchmove', handleTouchMove);
            canvas.addEventListener('touchend', stopDrawing);

            // Clear signature
            clearButton.addEventListener('click', clearSignature);

            function startDrawing(e) {
                isDrawing = true;
                currentPath = [];
                const [x, y] = getMousePos(e);
                currentPath.push({x, y});
                
                // Also draw on canvas for visual feedback
                ctx.beginPath();
                ctx.moveTo(x, y);
            }

            function draw(e) {
                if (!isDrawing) return;
                e.preventDefault();

                const [x, y] = getMousePos(e);
                currentPath.push({x, y});
                
                // Draw on canvas
                ctx.lineTo(x, y);
                ctx.stroke();
            }

            function stopDrawing() {
                if (isDrawing && currentPath.length > 1) {
                    allPaths.push([...currentPath]);
                    updateSignatureInput();
                }
                isDrawing = false;
            }

            function handleTouchStart(e) {
                e.preventDefault();
                const touch = e.touches[0];
                const mouseEvent = new MouseEvent('mousedown', {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                canvas.dispatchEvent(mouseEvent);
            }

            function handleTouchMove(e) {
                e.preventDefault();
                const touch = e.touches[0];
                const mouseEvent = new MouseEvent('mousemove', {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                canvas.dispatchEvent(mouseEvent);
            }

            function getMousePos(e) {
                const rect = canvas.getBoundingClientRect();
                const scaleX = canvas.width / rect.width;
                const scaleY = canvas.height / rect.height;

                return [
                    (e.clientX - rect.left) * scaleX,
                    (e.clientY - rect.top) * scaleY
                ];
            }

            function clearSignature() {
                ctx.fillStyle = 'white';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                allPaths = [];
                currentPath = [];
                signatureInput.value = '';
            }

            function generateSVGSignature() {
                if (allPaths.length === 0) return null;
                
                let svgPaths = '';
                allPaths.forEach(path => {
                    if (path.length < 2) return;
                    let pathData = `M ${path[0].x} ${path[0].y}`;
                    for (let i = 1; i < path.length; i++) {
                        pathData += ` L ${path[i].x} ${path[i].y}`;
                    }
                    svgPaths += `<path d="${pathData}" stroke="#000" stroke-width="2" stroke-linecap="round" fill="none"/>`;
                });
                
                const svg = `<svg width="800" height="200" xmlns="http://www.w3.org/2000/svg">${svgPaths}</svg>`;
                return 'data:image/svg+xml;base64,' + btoa(svg);
            }

            function updateSignatureInput() {
                // Generate SVG instead of PNG
                const svgData = generateSVGSignature();
                if (svgData) {
                    signatureInput.value = svgData;
                }
            }
        });
    </script>
</body>
</html>